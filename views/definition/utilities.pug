mixin wordlink(q)
  a(href='definition?q='+encodeURI(q))= q
mixin sentencelink(q)
  a(href='definition?q='+encodeURI(query.input+"~"+q))= q
//- mixin test(q)
//-   q.replace(/\{-(.*?)\-}/g, '<a href="definition?q=$1">$1</a>')

//- mixin example(eg)
  //- eg.replace(/{-/g,'<a href="definition?q=').replace(/-:-/g,'">').replace(/-}/g,'</a>')

mixin format(tagName,e)
  #{tagName}(class!=attributes.class)!= e.replace(/\"(.+?)\"/g, '<q>$1</q>').replace(/\(-(.+?)-\)/g, '<small>$1</small>').replace(/\((.+?)\)/g, '<em>$1</em>').replace(/\{-(.+?)-\}/g, (_,q)=>'<a href="definition?q='+encodeURI(q)+'">'+q+'</a>').replace(/\[(.*?)\]/g, '<b>$1</b>')

mixin message(raw)
  div.message
    ol
      each row in raw
        li
          p= row.msg
            if row.list && row.list.length
              | :
              each word in row.list
                | ~
                +wordlink(word)

mixin meaning(row)
  each define,grammar in row
    div.pos(class=grammar.toLowerCase())
      h2= grammar
      div
        each mean,ty in define
          div(class=mean.kind)
            +internal_casting_mean(mean.v)
            +internal_casting_exam(mean.exam)
            +internal_casting_usage(mean.usage)

mixin suggestion(raw)
  each row,name in raw
    div.suggestion(class=name.toLowerCase())
      h3= name
      div
        +#{name}(row)

mixin thesaurus(raw)
  if raw && raw.length
    each row in raw
      div(class=row.kind)
        +examWord(row.v)

mixin internal_casting_mean(o)
  if o
    if (typeof o === 'string')
      +format('p',o)
    else
      each e in o
        if (e.mean.length)
          div.mean
            each eg in e.mean
              +format('p',eg)
        if (e.exam.length)
          ul
            each eg in e.exam
              +format('li',eg)

    //- else if(o.mean.length)
    //-   +#{o.type}(o.mean)

mixin meanWord(raw)
  ol
    each eg in raw
      li
        +wordlink(eg)

mixin meanSentence(raw)
  ul
    each eg in raw
      +format('li',eg)

mixin internal_casting_exam(o)
  if o && o.value.length
    +#{o.type}(o.value)

mixin examWord(raw)
  ol
    each eg in raw
      li
        +wordlink(eg)

mixin examSentence(raw)
  ul
    each eg in raw
      +format('li',eg)

mixin internal_casting_usage(o)
  if o && o.value.length
    +#{o.type}(o.value)

mixin usageWord(raw)
  ol
    each eg in raw
      li
        +wordlink(eg)

mixin usageSentence(raw)
  ul
    each eg in raw
      +format('li',eg)


//- mixin notation(row)
//-   div.notation
//-     h2= row.number
//-     div
//-       each k in row.notation
//-         p= k.sense
//-           if row.alpha
//-             each num in row.alpha
//-               +wordlink(num)

//- mixin suggestion(row)
//-   if row.length
//-     div.suggestion
//-       p
//-         each word in row
//-           +wordlink(word)

//- mixin thesaurus(row)
//-   if row && row.length
//-     div.thesaurus.synonym
//-       h3 Thesaurus
//-       div
//-         ol
//-           each word in row
//-             li
//-               +wordlink(word)

mixin result(o)
  each row in o
    if Array.isArray(row.clue)
      +translation(row)
    else
      +definition(row)

mixin translation(row, w)
  div.translation(data-lang=lang.tar)
    p= row.word
      //- span.speech(class=lang.tar).zA.icon-volume-up
      speech-engine(word=row.word lang=lang.tar)
    div
      each e in row.clue
        +definition(e)

mixin definition(raw)
  div.definition(data-lang=lang.tar)
    h1= raw.word
      //- span.speech.en.zA.icon-volume-up
      speech-engine(word=raw.word lang=lang.tar)
      //- speech-engine(word=raw.word lang=lang.src) @click="apple('Form cannot be submitted yet.', $event)"
    if query.status
      p
        each eg in query.sentence
          +sentencelink(eg)
          span ~
    div.meaning
      each row, name in raw.clue
        +#{name}(row)